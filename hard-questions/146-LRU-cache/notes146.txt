The question is not difficult we just need to consider every case on what we want to do.

The way to achieve O(1) time for get and put, while keeping track of the frequencies of when any item was last used is by keeping two data collection, one is a HashMap, which we use to map key to value, one is a Double Linked List, which we will use to keep track of an item's order to be removed when the map is at capacity.


Let's break down the requirementns.

- Set capacity of the cache, so size cannot go over the capacity
- get needs to return the value, and also because this is an LRUCache, when I get a value, it's order to be popped will be reset, which means it will move to the front of the list
- put needs to insert the key into the map as well as the list.
- If size goes over the capacity, then we need to pop the least utilized item, which is the one at the tail of our list
- When I try to insert, it's possible that the key exists already, so if it's an existing item, I need to reset the order of that item.

From this, I can tell a couple of things.

- My list need a head and a tail, so I can keep track of the front and the end
- My map needs to hold a key to integer, and value of a node, because I need to be able to reference to the node in the list when performing operations.
- need a function to add new node to front
- need a function to remove a node from the list
- need a function to move
- need a function to pop the tail item

Then we just go on and implement all of the above, we just need to make sure what we're doing for each function makes sense for each.
