The solution is easy if you have an understanding of how sum of arrays and subarrays of integers work.

Let's talk about the brute force solution.
We have two for loops, one start, and one end, and we have a cumulative sum value.
For every subarray, we check if the sum is k, if so count++.
Complexity O(n^2)


Let's talk about how we would solve it by math's perspective.
Let's consider the following array
[a b c d e]

If we want to get the sum of subarray [a,b] and subarray [c,d] in brute force, it will require us 2 looping operations (one adding from a to b, and one adding from c to d).
But if we apply some math logic, we have a loop that will give us a cumulative sum of subarray from [a,b,c,d], which means if we keep track of [a,b] when we ran into it, we could simply calculate out [c,d] if we subtract [a,b] from [a,b,c,d]

So in essence, if [c,d] = k, then we get k if we calculate out [a,b,c,d] - [a,b].  And this can be done by just one loop.

Essentially, we can turn this problem into a TWO SUM problem if we first calculate out the cumulative sums.

Considering [1,1,1] and k = 2

If there's a continuous subarray from i to j, then that means sum[j] - sum[i] must equal to k.

When we are doing a two sum problem, we can save our visited values in a map, and those are equivalent to our sum[i] values.  We store those in a map, so whenever we go to a new index j, we can use map.contains( sum[j]- k).  Since the map contains all values of sum[i], so essentially our formual is sum[i] = sum[j] - k.

In our map, we also need to store the occurances, because it's possible that a certain cumulative sum occrured more than once due to negative numbers.  So whenever we increment, we have to increment by the number of times we've seen sum[j] - k
