This is prime example for Dynamic Programming.

We have an array of houses [1,3,5,3,2,7,6].

This problem can be broken down to smaller problem, I will only rob the first house, if the value of the first house and the calculated max value from the 3rd house added together is bigger than if I skip the first house and get the max value of the second house.

So the function could be simplified as f[i] = f[i+1] or A[i] + f[i+2], This is if we start from the back, so if we start from the front it will become f[i] = f[i-1] OR f[i-2] + A[i].

To solve this, we need to use a method called memoization, which is they process of remembering the values we previously calculated.  We can simply keep another array, dp[], which stores the MAX calculated value at each index.

Example:
dp[0] = nums[0]
dp[1] = Math.max(nums[0],nums[1]);

then
dp[2] = Math.max(dp[1], dp[0] + nums[2]);
dp[3] = Math.max(dp[2], dp[1] + nums[3]);

And so on.

************** Improvement **************

Since the question only asks for the last final answer, we really don't need to keep track of all historical values of dp[] in an array.

We really only need two variables, one to remember what was the previous value, and one to remember what was the previous previous calculated value.  As we keep moving forward in the array, we just swap out previous previous value with the previous value, and previous with the current value.  So when we go to the next iteration, we would just work with the previous value and the previous previous value.
