This question requires some understanding of math and how to easily we can calculate out the number of mins.

Given the array [2, 9, 7, 8, 3, 4, 6, 1]

how many cases are there where the number 3 at index 4 is the min, when it is the right most element.

9,7,8,3
7,8,3
8,3
3

Let's also consider how many cases are here where the number 3 at index 4 is the min when it is the left most element.

3
3,4
3,4,6

From here, we can determine that, if we disregard the number 2 and number 1, we have the following subarrays that all have minimum of 3

9,7,8,3
9,7,8,3,4
9,7,8,3,4,6

7,8,3
7,8,3,4
7,8,3,4,6

8,3
8,3,4
8,3,4,6

3
3,4
3,4,6

The total subarrays are 12, which is 4 times 3, because for the first case (where 3 is right most element), there were 4 elements, and for the second case (where 3 is the left most element), there were 3 elements.

So if we can calculate for each index, the above two conditions, then we can easily calculate out what the total min is.

We do this by monotonous stack

A monotonous increasing stack is where we keep track of elements in a stack in an increasing order.  We do so by popping off any element on the stack that's bigger than my current visiting element before pushing my element onto the stack.  So for example in the above array [2, 9, 7, 8, 3, 4, 6, 1]

At index 0,
stack is 2

At index 1,
stack is 2, 9

At index 2,
stack is 2, 7  -  This is because we pop off number 9 since it's bigger than 7.

At index 3
stack is 2,7,8

at index 4
stack is 2, 3   -  we pop off 7 and 8 since it's bigger than 3

This help us determine every time that, out of all previous visited elements, what's the last element that's smaller than my current element.

At index 4, we can easily calculate the distance between the last element that's smaller and my current element, which is 0 to 4, so distance is 4.  This give us the information we needed in previous formula.

let's apply the same logic going from the back.

At index 4, it pops off 4 and 6, so stack only has
1,3

The distance between them is 3.  So this give us what we needed to calculate the min

We simply do a 2 pass (or 1 pass if you manipulate the loop a bit)
And at the end, we would have an array of leftElements, and array of rightElements, which indicate the distance to the left previous less element and the distance to the right next element.  We simply calculate the sum by

answer += A[i] * left[i] * right[i]
